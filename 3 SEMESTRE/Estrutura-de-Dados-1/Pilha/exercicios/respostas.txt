1 e 2 )

A - 524*+1-

B - 36+52-/4*

C - 26+81-+3/7+

3) L 

4)

void inverte_pilha(lista * l)
{
    int i;
    pilha p;
    for (i = 0; i < k; i++) {
        push(&p, l.itens[i]);
    }
    for (i = 0; i < k; i+=) {
        l.itens[i] = top(&p);
    }
}


5) 

A) A pilha tem que armazenar um numero inteiro sempre

B)

void push(pilha * p, stack_info x)
{
	if (p.itens[0] != STACK_MAX - 2) {
		p->itens[++p->topo] = x;
	}
	else {
		fprintf(stderr, "Pilha cheia!\n");
		exit(1);
	}
}

stack_info pop(pilha * p)
{
	if (p.itens[0] == 0) {
		return p->itens[p->topo--];
	}
	else {
		fprintf(stderr, "Pilha vazia!\n");
		exit(1);
	}
}

6)

void rotina(pilha * p1, pilha * p2)
{
    int i;
    for (i = 0; i < p1->topo; i ++) {
        push(p1, top(p2));
    }
}

7)

bool palindromo(char * str)
{
    int i;
    pilha p;
    for (i = 0; str[i] != '\0'; i++) {
        push(&p, str[i]);
    }
    for (i = 0; str[i] != '\0'; i++) {
        if (top(p) != str[i])
            return false;
    }
    return true;
}